%%
%name Tiger

%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE

%nonterm  program | letexp
        | exp | expseq | explistempty | explist
        | decs | dec
        | tydec | fundec | vardec
        | ty | typeid | tyfields | typeidseq
        | lvalue
        | intcomp | refcomp | stringcomp
        | recexp | recexplist | recassign
        | arrexp
        | funccall | funcarglist
        | intop
        | eqop

%pos int
%eop EOF
%noshift EOF

%left TIMES
%left DIVIDE
%left PLUS
%left MINUS
%nonassoc EQ NEQ LT LE GT GE

%start program

(* error recovery *)
%verbose
%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE
    DO OF NIL
%prefer THEN ELSE LPAREN
%value ID ("bogus")
%value INT (0)
%value STRING ("")
%change -> IN ID END (*scope closer*)
%change ARRAY ID -> ARRAY OF ID
%change ID DOT ID EQ -> ID DOT ID ASSIGN
%change FOR ID EQ -> FOR ID ASSIGN
%change EQ -> ASSIGN
%%
program: exp ()

letexp: LET decs IN expseq END ()

decs: dec decs ()
    |          ()

dec: tydec  ()
   | vardec ()
   | fundec ()

(* Type and type declarations *)
tydec: TYPE ID EQ ty ()

ty: ID                     ()
  | LBRACE tyfields RBRACE ()
  | ARRAY OF ID            ()

tyfields: (*epsilon*)           ()
        | ID COLON ID typeidseq ()

typeidseq: COMMA ID COLON ID typeidseq ()
         |                             ()

(* Variable declarations *)
vardec: VAR ID ASSIGN exp          ()
      | VAR ID COLON ID ASSIGN exp ()

(* Function declarations *)
fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp          ()
      | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp ()

expseq: exp SEMICOLON expseq ()
      | exp                  ()

(* Expressions *)
exp: letexp                          ()
   | lvalue                          ()
   | NIL                             ()
   | LPAREN expseq RPAREN            ()
   | LPAREN RPAREN                   ()
   | STRING                          ()
   | INT                             ()
   | INT intop INT                   ()
   | intcomp                         ()
   | refcomp                         ()
   | stringcomp                      ()
   | recexp                          ()
   | recassign                       ()
   | arrexp                          ()
   | IF exp THEN exp ELSE exp        ()
   | IF exp THEN exp                 ()
   | WHILE exp DO exp                ()
   | FOR ID ASSIGN exp TO exp DO exp ()
   | BREAK                           ()
   | ID EQ exp                       ()
   | ID intop exp                    ()
   | funccall                        ()

lvalue: ID                       ()
      | lvalue DOT ID            ()
      | lvalue LBRACK exp RBRACK ()

intop: PLUS   ()
     | MINUS  ()
     | TIMES  ()
     | DIVIDE ()

eqop:  EQ  ()
     | NEQ ()
     | LT  ()
     | LE  ()
     | GT  ()
     | GE  ()

intcomp: INT eqop INT  ()

stringcomp: STRING eqop STRING ()

recexp: ID LBRACE ID EQ exp recexplist RBRACE ()
      | ID LBRACE RBRACE                      ()

recexplist: COMMA ID EQ exp recexplist ()
          | (*epsilon*)                ()

recassign: ID DOT ID ASSIGN exp ()

arrexp: ID LBRACK exp RBRACK OF exp ()

funccall: ID LPAREN RPAREN                 ()
        | ID LPAREN exp funcarglist RPAREN ()

funcarglist: COMMA exp funcarglist ()
           |                       ()
