%%
%name Tiger

%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE

%nonterm  program | letexp
        | exp | expseq | explistempty | explist
        | decs | dec
        | tydec | fundec | vardec
        | ty | typeid | tyfields | typeidseq
        | lvalue
        | intcomp | refcomp | stringcomp
        | recexp | recexplist | recassign
        | arrexp
        | funccall | funcarglist
        | intop
        | eqop

%pos int
%eop EOF
%noshift EOF

%left TIMES
%left DIVIDE
%left PLUS
%left MINUS
%nonassoc EQ NEQ LT LE GT GE

%start program

(* error recovery *)
%verbose
%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE
    DO OF NIL
%prefer THEN ELSE LPAREN
%value ID ("bogus")
%value INT (0)
%value STRING ("")
%change -> IN ID END (*scope closer*)
%%

program	: exp				()

	
exp: 			()
