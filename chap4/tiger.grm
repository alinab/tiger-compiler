structure A = Absyn
%%
%name Tiger
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE

%nonterm  program of A.exp
        | letexp of A.exp
        | lvalue of A.var
        | exp of A.exp
        | expseq of A.exp
        | expseqlist of (A.exp * pos) list
        | dec of A.dec
        | decs of A.dec list
        | decseq of A.dec list
        | tydec of A.dec
        | vardec of A.dec
        | fundec of A.dec
        | paramfields of A.field list
        | ty of A.ty
        | tyfields of A.ty
        | typeidseq
        | intop of A.oper
        | eqop of A.oper
        | intcomp of A.exp
        | stringcomp of A.exp
        | refcomp of A.exp
        | recexp of A.exp
        | recexplist of (A.symbol * A.exp * A.pos) list
        | recassign of A.exp
        | arrexp of A.exp
        | arrassign of A.exp
        | funccall of A.exp
        | funcarglist of A.exp list

%pos int
%eop EOF
%noshift EOF

%left TIMES
%left DIVIDE
%left PLUS
%left MINUS
%nonassoc EQ NEQ LT LE GT GE

%start program

(* error recovery *)
%verbose
%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE
    DO OF NIL
%prefer THEN ELSE LPAREN
%value ID ("bogus")
%value INT (0)
%value STRING ("")
%change -> IN ID END (*scope closer*)
%change ARRAY ID -> ARRAY OF ID
%change ID DOT ID EQ -> ID DOT ID ASSIGN
%change FOR ID EQ -> FOR ID ASSIGN
%%
program	: exp				               (exp)

letexp: LET decs IN expseq END             (A.LetExp{decs=decs
                                                  , body=expseq
                                                  , pos=LETleft})

decs: decseq                               (decseq)

decseq: dec decseq                         (dec :: decseq)
      |                                    ([])

dec: tydec                                 (tydec)
   | vardec                                (vardec)
   | fundec                                (fundec)

(* Type and type declarations *)
tydec: TYPE ID EQ ty                       (A.TypeDec[{name=A.mksym(ID)
                                                      , ty=ty
                                                      , pos=TYPEleft}])

ty: ID                                     (A.NameTy(A.mksym(ID), IDleft))
  | LBRACE tyfields RBRACE                 (tyfields)
  | ARRAY OF ID                            (A.ArrayTy(A.mksym(ID), IDleft))

tyfields: (*epsilon*)                      (A.RecordTy[])
        | ID COLON ID typeidseq            (A.RecordTy[{name=A.mksym(ID1)
                                                        , escape=ref true
                                                        , typ=A.mksym(ID2)
                                                        , pos=ID1left}])

typeidseq: COMMA ID COLON ID typeidseq     (A.RecordTy[{name=A.mksym(ID1)
                                                        , escape=ref true
                                                        , typ=A.mksym(ID2)
                                                        , pos=ID1left}])
         |                                 ()

(* Variable declarations *)
vardec: VAR ID ASSIGN exp                  (A.VarDec{name=A.mksym("test")
                                                      , escape=ref true
                                                      , typ=NONE, init=exp
                                                      , pos=VARleft} )
      | VAR ID COLON ID ASSIGN exp         (A.VarDec{name=A.mksym(ID1)
                                                     , escape=ref true
                                                     , typ=SOME(A.mksym(ID2), ID2left)
                                                     , init=exp, pos=VARleft})


(* Function declarations *)
fundec: FUNCTION ID LPAREN paramfields RPAREN EQ exp
                                           (A.FunctionDec[{name=A.mksym(ID)
                                                        , params=paramfields
                                                        , result=NONE
                                                        , body=exp
                                                        , pos=IDleft}])
      | FUNCTION ID LPAREN paramfields RPAREN COLON ID EQ exp
                                           (A.FunctionDec[{name=A.mksym(ID1)
                                                      , params=paramfields
                                                      , result=SOME(A.mksym(ID2),
                                                      ID2left)
                                                      , body=exp
                                                      , pos=ID1left}])

paramfields: ID COLON ID COMMA paramfields ([{name=A.mksym(ID1)
                                              , escape=ref true
                                              , typ=A.mksym(ID2)
                                              , pos=ID1left}] @ paramfields)
           | ID COLON ID                   ([{name=A.mksym(ID1)
                                               , escape=ref true
                                               , typ=A.mksym(ID2)
                                               , pos=ID1left}])
           |                               ([])

expseq: expseqlist                         (A.SeqExp(expseqlist))

expseqlist: exp                            ([(exp, expleft)])
          | exp SEMICOLON expseqlist       ([(exp, expleft)] @ expseqlist)
          |                                ([])


exp: letexp                                (letexp)
   | lvalue                                (A.VarExp(lvalue))
   | NIL                                   (A.NilExp)
   | LPAREN expseq RPAREN                  (expseq)
   | STRING                                (A.StringExp(STRING, STRINGleft))
   | INT                                   (A.IntExp(INT))
   | INT intop INT                         (A.OpExp{left=A.IntExp(INT1)
                                                    , oper=intop
                                                    , right=A.IntExp(INT2)
                                                    , pos=INT1left})
   | intcomp                               (intcomp)
   | stringcomp                            (stringcomp)
   | refcomp                               (refcomp)
   | BREAK                                 (A.BreakExp(BREAKleft))
   | IF exp THEN exp ELSE exp              (A.IfExp{test=exp1, then'=exp2
                                                    , else'=SOME(exp3)
                                                    , pos=IFleft})
   | IF exp THEN exp                       (A.IfExp{test=exp1, then'=exp2
                                                    , else'=NONE
                                                    , pos=IFleft})
   | WHILE exp DO exp                      (A.WhileExp{test=exp1
                                                    , body=exp2
                                                    , pos=WHILEleft})
   | FOR ID ASSIGN exp TO exp DO exp       (A.ForExp{var=A.mksym(ID),
                                                     escape=ref true
                                                    , lo=exp1
                                                    , hi=exp2
                                                    , body=exp3
                                                    , pos=FORleft})
   | ID intop exp                          (A.OpExp{left=A.VarExp(A.SimpleVar(A.mksym(ID),
                                                    IDleft))
                                                    , oper=intop
                                                    , right=exp
                                                    , pos=IDleft})
   | ID ASSIGN exp                         (A.AssignExp{var=A.SimpleVar(A.mksym(ID),
                                                    IDleft)
                                                    , exp=exp
                                                    , pos=ASSIGNleft})
   | lvalue EQ exp                         (A.IfExp{test=A.IntExp(1)
                                                    , then'=A.IntExp(1)
                                                    , else'=(SOME (A.IntExp(0)))
                                                    , pos=EQleft})
   | recexp                                (recexp)
   | recassign                             (recassign)
   | arrexp                                (arrexp)
   | arrassign                             (arrassign)
   | funccall                              (funccall)

lvalue: ID                                 (A.SimpleVar(A.mksym(ID)
                                                       , IDleft))
      | lvalue DOT ID                      (A.FieldVar(lvalue
                                                       , A.mksym(ID)
                                                       , IDleft))
      | lvalue LBRACK exp RBRACK           (A.SubscriptVar(lvalue, exp
                                                       , lvalueleft))


intop: PLUS                                (A.PlusOp)
     | MINUS                               (A.MinusOp)
     | TIMES                               (A.TimesOp)
     | DIVIDE                              (A.DivideOp)

eqop:  EQ                                  (A.EqOp)
     | NEQ                                 (A.NeqOp)
     | LT                                  (A.LtOp)
     | LE                                  (A.LeOp)
     | GT                                  (A.GtOp)
     | GE                                  (A.GeOp)

refcomp: exp AND exp                       (A.IfExp{test=exp1
                                                    , then'=exp2
                                                    ,  else'=SOME(A.IntExp(0))
                                                    ,  pos=ANDleft})
       | exp OR  exp                       (A.IfExp{test=exp1
                                                   , then'=A.IntExp(1)
                                                   , else'=SOME(exp2)
                                                   , pos=ORleft})

intcomp: INT eqop INT                      (A.OpExp{left=A.IntExp(INT1)
                                                    , oper=eqop,
                                                    right=A.IntExp(INT2)
                                                    , pos=eqopleft})

stringcomp: STRING eqop STRING             (A.OpExp {left=A.StringExp(STRING1
                                                     , STRING1left)
                                                     , oper=eqop
                                                     , pos=eqopleft
                                                     , right=A.StringExp(STRING2
                                                     , STRING2left)})

recexp: ID LBRACE recexplist RBRACE        (A.RecordExp{fields=recexplist
                                                       , typ=A.mksym(ID)
                                                       , pos=IDleft})
      | ID LBRACE RBRACE                   (A.RecordExp{fields=[]
                                                       , typ=A.mksym(ID)
                                                       , pos=IDleft})


recexplist: ID EQ exp COMMA recexplist     ([(A.mksym(ID)
                                              , exp, IDleft)] @ recexplist)
          | ID EQ exp                      ([(A.mksym(ID), exp, IDleft)])

recassign: ID DOT ID ASSIGN exp            (A.AssignExp{var=
                                              A.FieldVar((A.SimpleVar(A.mksym(ID2),
                                              ID2left))
                                              ,A.mksym(ID1)
                                              ,ID1left)
                                              , exp=exp, pos=ASSIGNright})

arrexp: ID LBRACK exp RBRACK OF exp        (A.ArrayExp{typ=A.mksym(ID),
                                                size=exp1, init=exp2, pos=IDleft})

arrassign: ID LBRACK exp RBRACK ASSIGN exp
                                           (A.AssignExp{var=A.SubscriptVar(
                                              (A.SimpleVar(A.mksym(ID)
                                              , IDleft))
                                              , exp1, exp1left)
                                              , exp=exp2
                                              , pos=exp2left})

funccall: ID LPAREN RPAREN                 (A.CallExp{func=A.mksym(ID)
                                                      , args=[]
                                                      , pos=IDleft})
       | ID LPAREN funcarglist RPAREN      (A.CallExp{func=A.mksym(ID)
                                                      , args=funcarglist
                                                      , pos=IDleft})

funcarglist: exp COMMA funcarglist         ([exp] @ funcarglist)
           | exp                           ([exp])
